<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on LOCALIZZACIONE</title>
    <link>//postliminal.github.io/ecem202a_project/posts/</link>
    <description>Recent content in Posts on LOCALIZZACIONE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Dec 2021 01:26:06 -0700</lastBuildDate><atom:link href="//postliminal.github.io/ecem202a_project/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Proposal</title>
      <link>//postliminal.github.io/ecem202a_project/posts/0proposal/</link>
      <pubDate>Mon, 01 Nov 2021 01:26:06 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/0proposal/</guid>
      <description>Project Proposal 1. Motivation &amp;amp; Objective Indoors localization has been a highly researched topic for decades. Since GPS signals canâ€™t reach devices inside buildings, alternative methods using radio signals (Bluetooth, 802.15.4, wifi), audio signals, visual signals, etc. have been devised and published. Given that these sensing technologies (radio, audio, video, depth) continue to improve, the indoors localization problem is still relevant and continues to be actively researched. Therefore, we seek to contribute to the ongoing research by approaching the localization problem via the implementation and experimentation of some of these algorithms in a resource constrained computing environment (Arduino Nano Sense 33 BLE).</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>//postliminal.github.io/ecem202a_project/posts/1overview/</link>
      <pubDate>Thu, 02 Dec 2021 01:26:06 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/1overview/</guid>
      <description>Problem: With the rise and continuous update of various IoT communication standards it is hard to keep track of what is the most suitable option. Two standards, Bluetooth (BLE 5.0 standard) and Thread (implemented using OpenThread), are either massively adopted (BLE) or rapidly gaining popularity (thread). However, there has not been a recent analysis between these two protocols.
Project Goals: Make an updated analysis between these two protocols. By using various radio configurations for both protocols we can get a better understanding on their performance and limitations.</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>//postliminal.github.io/ecem202a_project/posts/4design/</link>
      <pubDate>Mon, 01 Nov 2021 01:26:43 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/4design/</guid>
      <description>[image 1] - should be showing 3 beacons, a central device, and maybe a PC? Plus X-Y coordinates and roughly spatial distance. DO NOT INCLUDE specific ble or openthread specs/terms/concepts.
Contents  Hardware Platforms Software Stack BLE Application OpenThread Application Location from RSSI Experiments  The Hardware Platform The SoC: Nordic nRF52840 [images of boards?]
 (2x) Arduino Nano Sense 33 BLE (2x) nRF52840 Dongle (1x) nRF52840 Development Kit  The Software Stack Embedded Software Development:  Segger Embedded Studio nRF5 SDK &amp;amp; nRF5 SDK for Thread and Zigbee nRF Connect+Programmer for flashing code CMSIS Libraries for Arm Cortex M microcontrollers  Utilities and Other tools:  Python + Matplotlib nRF BLE Sniffer nRF 802.</description>
    </item>
    
  </channel>
</rss>
