<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LOCALIZZACIONE</title>
    <link>//postliminal.github.io/ecem202a_project/</link>
    <description>Recent content on LOCALIZZACIONE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Dec 2021 03:02:21 -0800</lastBuildDate><atom:link href="//postliminal.github.io/ecem202a_project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Proposal</title>
      <link>//postliminal.github.io/ecem202a_project/posts/0proposal/</link>
      <pubDate>Mon, 01 Nov 2021 01:26:06 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/0proposal/</guid>
      <description>Project Proposal 1. Motivation &amp;amp; Objective Indoors localization has been a highly researched topic for decades. Since GPS signals can’t reach devices inside buildings, alternative methods using radio signals (Bluetooth, 802.15.4, wifi), audio signals, visual signals, etc. have been devised and published. Given that these sensing technologies (radio, audio, video, depth) continue to improve, the indoors localization problem is still relevant and continues to be actively researched. Therefore, we seek to contribute to the ongoing research by approaching the localization problem via the implementation and experimentation of some of these algorithms in a resource constrained computing environment (Arduino Nano Sense 33 BLE).</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>//postliminal.github.io/ecem202a_project/posts/1overview/</link>
      <pubDate>Thu, 02 Dec 2021 01:26:06 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/1overview/</guid>
      <description>Problem: With the rise and continuous update of various IoT communication standards it is hard to keep track of what is the most suitable option. Two standards, Bluetooth (BLE 5.0 standard) and Thread (implemented using OpenThread), are either massively adopted (BLE) or rapidly gaining popularity (thread). However, there has not been a recent analysis between these two protocols.
Project Goals: Make an updated analysis between these two protocols. By using various radio configurations for both protocols we can get a better understanding on their performance and limitations.</description>
    </item>
    
    <item>
      <title>Prior Work</title>
      <link>//postliminal.github.io/ecem202a_project/posts/3priorwork/</link>
      <pubDate>Wed, 01 Dec 2021 01:26:43 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/3priorwork/</guid>
      <description>Bluetooth - BLE 5.0 A wireless communication protocol that is (almost if not already) ubiquitous. Released in 2016, BLE 5.0 introduced a few changes that make bluetooth technology suitable for more applications. New features allow:
 larger bandwidth transmissions (higher throughput = higher data speeds) multi device connection (e.g. now you can send music to two pairs of headphones from one device) larger advertising packets allow better pairing + other applications (beacons!</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>//postliminal.github.io/ecem202a_project/posts/4design/</link>
      <pubDate>Mon, 01 Nov 2021 01:26:43 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/4design/</guid>
      <description>Contents  Hardware Platforms Software Stack BLE Application OpenThread Application Localization Methods using RSS Experiments  The Hardware Platform The SoC: Nordic nRF52840  (2x) Arduino Nano Sense 33 BLE  Beacon 1   (2x) nRF52840 Dongle  Beacon 2 Beacon 3   (1x) nRF52840 Development Kit  Central device (polls beacons)     The Software Stack Embedded Software Development:  Segger Embedded Studio nRF5 SDK &amp;amp; nRF5 SDK for Thread and Zigbee nRF Connect+Programmer for flashing code CMSIS Libraries for Arm Cortex M microcontrollers  Utilities and Other tools:  Python + Matplotlib nRF BLE Sniffer nRF 802.</description>
    </item>
    
    <item>
      <title>Results</title>
      <link>//postliminal.github.io/ecem202a_project/posts/5results/</link>
      <pubDate>Mon, 01 Nov 2021 01:26:43 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/5results/</guid>
      <description>1. Noisy measurements of RSS in BLE and 802.15.4   The above two images show the RSS collected. As expected the RSS degrades as the distance between the beacons and the receiver increases.
The below image shows a snapshot of the ML model&amp;rsquo;s ability to predict the distance from a RSS-fingerprint map to estimate the location of an object.
 2. Localization results (BLE vs. Thread) It should be noted that OpenThread is a self-healing network, and since &amp;ldquo;Self-healing allows a routing-based network to operate when a node breaks down or when a connection becomes unreliable.</description>
    </item>
    
    <item>
      <title>Future Work</title>
      <link>//postliminal.github.io/ecem202a_project/posts/5_5futurework/</link>
      <pubDate>Fri, 10 Dec 2021 03:02:21 -0800</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/5_5futurework/</guid>
      <description>Future Experimental Work to Consider:
 As mentioned in the results section, the group was able to re-configure a machine learning framework, test it using open - sourced data, and implement on a Nordic device using Segger. The results magnitude aligns with what was expected, but had a sign reversal that needs to be further elaborated. The discerepancy is believed to be due to a configuration issue, and not a fundamental understanding of the implementation since CMSIS&#39; instructions were followed which also utilizes SK-learn.</description>
    </item>
    
    <item>
      <title>References</title>
      <link>//postliminal.github.io/ecem202a_project/posts/6references/</link>
      <pubDate>Mon, 01 Nov 2021 01:26:43 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/posts/6references/</guid>
      <description>Included in this section are additional resources utilized throughout the process that are not in the initial project proposal.
  Polak, Ladislav et al. “Received Signal Strength Fingerprinting-Based Indoor Location Estimation Employing Machine Learning.” Sensors (Basel, Switzerland) vol. 21,13 4605. 5 Jul. 2021, doi:10.3390/s21134605
  https://developer.arm.com/documentation/102052/0000/Implement-your-SVM-with-CMSIS-DSP
  https://developer.arm.com/documentation/102052/0000/Train-your-Bayesian-estimator-with-scikit-learn
  https://github.com/nicknameBOB/TF_NCS_dev/blob/master/README.md (Does not appear to work, but cited since the group experimented with this)
  </description>
    </item>
    
    <item>
      <title>Contact Us</title>
      <link>//postliminal.github.io/ecem202a_project/contact/</link>
      <pubDate>Mon, 01 Nov 2021 01:26:06 -0700</pubDate>
      
      <guid>//postliminal.github.io/ecem202a_project/contact/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
